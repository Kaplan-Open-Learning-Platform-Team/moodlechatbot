{"version":3,"file":"chat.min.js","sources":["../src/chat.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport { get_string as getString } from 'core/str';\nimport * as Repository from './repository';\n\nconst Selectors = {\n    actions: {\n        send: '[data-action=\"send\"]'\n    },\n    regions: {\n        messages: '[data-region=\"messages\"]',\n        input: '[data-region=\"input\"]'\n    }\n};\n\n/**\n * Initialize the chat module.\n *\n * @param {string} containerId The id of the chat container.\n */\nexport const init = (containerId) => {\n    const container = document.getElementById(containerId);\n    const messagesRegion = container.querySelector(Selectors.regions.messages);\n    const inputRegion = container.querySelector(Selectors.regions.input);\n    const sendButton = container.querySelector(Selectors.actions.send);\n\n    /**\n     * Append a message to the chat.\n     *\n     * @param {string} sender The sender of the message.\n     * @param {string} message The message content.\n     */\n    const appendMessage = (sender, message) => {\n        const messageElement = document.createElement('p');\n        messageElement.innerHTML = `<strong>${sender}:</strong> ${message}`;\n        messagesRegion.appendChild(messageElement);\n        messagesRegion.scrollTop = messagesRegion.scrollHeight;\n    };\n\n    /**\n     * Send a message to the server.\n     *\n     * @param {string} message The message to send.\n     * @return {Promise}\n     */\n    const sendMessage = async (message) => {\n        try {\n            const response = await Repository.sendChatMessage(message);\n            if (response.status === 'success') {\n                appendMessage('Bot', response.message);\n            } else {\n                const errorString = await getString('error', 'moodle');\n                appendMessage('Bot', errorString);\n            }\n        } catch (error) {\n            const errorString = await getString('error', 'moodle');\n            appendMessage('Bot', errorString);\n        }\n    };\n\n    /**\n     * Register event listeners.\n     */\n    const registerEventListeners = () => {\n        sendButton.addEventListener('click', () => {\n            const message = inputRegion.value.trim();\n            if (message) {\n                appendMessage('You', message);\n                inputRegion.value = '';\n                sendMessage(message);\n            }\n        });\n\n        inputRegion.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                sendButton.click();\n            }\n        });\n    };\n\n    registerEventListeners();\n};\n"],"names":["Selectors","send","messages","input","containerId","container","document","getElementById","messagesRegion","querySelector","inputRegion","sendButton","appendMessage","sender","message","messageElement","createElement","innerHTML","appendChild","scrollTop","scrollHeight","addEventListener","value","trim","async","response","Repository","sendChatMessage","status","errorString","error","sendMessage","e","key","shiftKey","preventDefault","click"],"mappings":"ksCAIMA,kBACO,CACLC,KAAM,wBAFRD,kBAIO,CACLE,SAAU,2BACVC,MAAO,uCASMC,oBACXC,UAAYC,SAASC,eAAeH,aACpCI,eAAiBH,UAAUI,cAAcT,kBAAkBE,UAC3DQ,YAAcL,UAAUI,cAAcT,kBAAkBG,OACxDQ,WAAaN,UAAUI,cAAcT,kBAAkBC,MAQvDW,cAAgB,CAACC,OAAQC,iBACrBC,eAAiBT,SAASU,cAAc,KAC9CD,eAAeE,4BAAuBJ,6BAAoBC,SAC1DN,eAAeU,YAAYH,gBAC3BP,eAAeW,UAAYX,eAAeY,cA4B1CT,WAAWU,iBAAiB,SAAS,WAC3BP,QAAUJ,YAAYY,MAAMC,OAC9BT,UACAF,cAAc,MAAOE,SACrBJ,YAAYY,MAAQ,GAvBZE,OAAAA,oBAENC,eAAiBC,WAAWC,gBAAgBb,YAC1B,YAApBW,SAASG,OACThB,cAAc,MAAOa,SAASX,aAC3B,OACGe,kBAAoB,mBAAU,QAAS,UAC7CjB,cAAc,MAAOiB,cAE3B,MAAOC,aACCD,kBAAoB,mBAAU,QAAS,UAC7CjB,cAAc,MAAOiB,eAajBE,CAAYjB,aAIpBJ,YAAYW,iBAAiB,YAAaW,IACxB,UAAVA,EAAEC,KAAoBD,EAAEE,WACxBF,EAAEG,iBACFxB,WAAWyB"}