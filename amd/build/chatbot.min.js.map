{"version":3,"file":"chatbot.min.js","sources":["../src/chatbot.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport {exception as displayException} from 'core/notification';\nimport {getString} from 'core/str';\n\n/**\n * Selectors used in this module.\n *\n * @type {Object}\n */\nconst Selectors = {\n    container: '#moodlechatbot-container',\n    messages: '#moodlechatbot-messages',\n    input: {\n        textarea: '#moodlechatbot-textarea',\n        send: '#moodlechatbot-send',\n    },\n};\n\n/**\n * Add a message to the chat interface.\n *\n * @param {string} sender The sender of the message ('user' or 'bot').\n * @param {string} message The message content.\n */\nconst addMessageToChat = (sender, message) => {\n    const messagesContainer = document.querySelector(Selectors.messages);\n    const messageElement = document.createElement('div');\n    messageElement.classList.add('message', `${sender}-message`);\n    messageElement.textContent = message;\n    messagesContainer.appendChild(messageElement);\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n};\n\n/**\n * Fetch the bot's response from the server.\n *\n * @param {string} userMessage The user's message.\n * @return {Promise}\n */\nconst getBotResponse = (userMessage) => {\n    return fetchMany([{\n        methodname: 'mod_moodlechatbot_get_bot_response',\n        args: {message: userMessage},\n    }])[0]\n    .catch(error => {\n        displayException(error);\n        return getString('error', 'mod_moodlechatbot');\n    });\n};\n\n/**\n * Send a message and get the bot's response.\n */\nconst sendMessage = () => {\n    const textarea = document.querySelector(Selectors.input.textarea);\n    const userMessage = textarea.value.trim();\n    if (userMessage) {\n        addMessageToChat('user', userMessage);\n        textarea.value = '';\n        textarea.style.height = 'auto';\n\n        getBotResponse(userMessage)\n        .then(response => {\n            addMessageToChat('bot', response);\n        });\n    }\n};\n\n/**\n * Initialize event listeners.\n */\nconst initEventListeners = () => {\n    const sendButton = document.querySelector(Selectors.input.send);\n    const textarea = document.querySelector(Selectors.input.textarea);\n\n    sendButton.addEventListener('click', sendMessage);\n\n    textarea.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n        }\n    });\n};\n\n/**\n * Initialize the chat bot.\n */\nexport const init = () => {\n    initEventListeners();\n};\n"],"names":["Selectors","textarea","send","addMessageToChat","sender","message","messagesContainer","document","querySelector","messageElement","createElement","classList","add","textContent","appendChild","scrollTop","scrollHeight","sendMessage","userMessage","value","trim","style","height","methodname","args","catch","error","getBotResponse","then","response","sendButton","addEventListener","e","key","shiftKey","preventDefault","initEventListeners"],"mappings":"0NASMA,mBAEQ,0BAFRA,gBAGK,CACHC,SAAU,0BACVC,KAAM,uBAURC,iBAAmB,CAACC,OAAQC,iBACxBC,kBAAoBC,SAASC,cAAcR,oBAC3CS,eAAiBF,SAASG,cAAc,OAC9CD,eAAeE,UAAUC,IAAI,oBAAcR,oBAC3CK,eAAeI,YAAcR,QAC7BC,kBAAkBQ,YAAYL,gBAC9BH,kBAAkBS,UAAYT,kBAAkBU,cAuB9CC,YAAc,WACVhB,SAAWM,SAASC,cAAcR,gBAAgBC,UAClDiB,YAAcjB,SAASkB,MAAMC,OAC/BF,cACAf,iBAAiB,OAAQe,aACzBjB,SAASkB,MAAQ,GACjBlB,SAASoB,MAAMC,OAAS,OApBRJ,CAAAA,cACb,cAAU,CAAC,CACdK,WAAY,qCACZC,KAAM,CAACnB,QAASa,gBAChB,GACHO,OAAMC,oCACcA,QACV,kBAAU,QAAS,wBAe1BC,CAAeT,aACdU,MAAKC,WACF1B,iBAAiB,MAAO0B,6BAyBhB,KAjBO,YACjBC,WAAavB,SAASC,cAAcR,gBAAgBE,MACpDD,SAAWM,SAASC,cAAcR,gBAAgBC,UAExD6B,WAAWC,iBAAiB,QAASd,aAErChB,SAAS8B,iBAAiB,YAAaC,IACrB,UAAVA,EAAEC,KAAoBD,EAAEE,WACxBF,EAAEG,iBACFlB,mBASRmB"}