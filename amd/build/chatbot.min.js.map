{"version":3,"file":"chatbot.min.js","sources":["../src/chatbot.js"],"sourcesContent":["import { call as fetchMany } from 'core/ajax';\nimport { exception as displayException } from 'core/notification';\nimport { getString } from 'core/str';\n\n/**\n * Selectors used in this module.\n *\n * @type {Object}\n */\nconst Selectors = {\n  container: '#moodlechatbot-container',\n  messages: '#moodlechatbot-messages',\n  input: {\n    textarea: '#moodlechatbot-textarea',\n    send: '#moodlechatbot-send',\n  },\n};\n\n/**\n * Add a message to the chat interface.\n *\n * @param {string} sender The sender of the message ('user', 'bot', or 'tool').\n * @param {string} message The message content.\n */\nconst addMessageToChat = (sender, message) => {\n  const messagesContainer = document.querySelector(Selectors.messages);\n  const messageElement = document.createElement('div');\n  messageElement.classList.add('message', `${sender}-message`);\n  messageElement.textContent = message;\n  messagesContainer.appendChild(messageElement);\n  messagesContainer.scrollTop = messagesContainer.scrollHeight;\n};\n\n/**\n * Fetch the bot's response from the server.\n *\n * @param {string} userMessage The user's message.\n * @return {Promise}\n */\nconst getBotResponse = (userMessage) => {\n  return fetchMany([{\n    methodname: 'mod_moodlechatbot_get_bot_response',\n    args: { message: userMessage },\n  }])[0]\n    .then(response => {\n      // Log the raw response for debugging.\n      console.log('Raw server response:', response);\n      return response;\n    })\n    .catch(error => {\n      // Log the error and display it.\n      console.error('Error fetching bot response:', error);\n      displayException(error);\n      return getString('error', 'mod_moodlechatbot');\n    });\n};\n\n/**\n * Send a message and get the bot's response.\n */\nconst sendMessage = () => {\n  const textarea = document.querySelector(Selectors.input.textarea);\n  const userMessage = textarea.value.trim();\n  if (userMessage) {\n    addMessageToChat('user', userMessage);\n    textarea.value = '';\n    textarea.style.height = 'auto';\n\n    getBotResponse(userMessage)\n      .then(response => {\n        // Log the response for debugging purposes.\n        console.log('Parsed server response:', response);\n\n        // Split the response if it contains a tool result.\n        const [botMessage, toolResult] = response.split('\\n\\nTool Result: ');\n        addMessageToChat('bot', botMessage || 'Error: No bot message');\n\n        // Check if there's a tool result and add it to the chat.\n        if (toolResult) {\n          addMessageToChat('tool', `Tool Result: ${toolResult}`);\n        }\n      })\n      .catch(error => {\n        // Log and show an error message in case of failure.\n        console.error('Error processing response:', error);\n        addMessageToChat('bot', 'There was an error processing your request.');\n      });\n  }\n};\n\n/**\n * Initialize event listeners.\n */\nconst initEventListeners = () => {\n  const sendButton = document.querySelector(Selectors.input.send);\n  const textarea = document.querySelector(Selectors.input.textarea);\n\n  sendButton.addEventListener('click', sendMessage);\n\n  textarea.addEventListener('keypress', (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  });\n};\n\n/**\n * Initialize the chat bot.\n */\nexport const init = () => {\n  initEventListeners();\n};\n\n"],"names":["Selectors","textarea","send","addMessageToChat","sender","message","messagesContainer","document","querySelector","messageElement","createElement","classList","add","textContent","appendChild","scrollTop","scrollHeight","sendMessage","userMessage","value","trim","style","height","methodname","args","then","response","console","log","catch","error","getBotResponse","botMessage","toolResult","split","sendButton","addEventListener","e","key","shiftKey","preventDefault","initEventListeners"],"mappings":"0NASMA,mBAEM,0BAFNA,gBAGG,CACLC,SAAU,0BACVC,KAAM,uBAUJC,iBAAmB,CAACC,OAAQC,iBAC1BC,kBAAoBC,SAASC,cAAcR,oBAC3CS,eAAiBF,SAASG,cAAc,OAC9CD,eAAeE,UAAUC,IAAI,oBAAcR,oBAC3CK,eAAeI,YAAcR,QAC7BC,kBAAkBQ,YAAYL,gBAC9BH,kBAAkBS,UAAYT,kBAAkBU,cA8B5CC,YAAc,WACZhB,SAAWM,SAASC,cAAcR,gBAAgBC,UAClDiB,YAAcjB,SAASkB,MAAMC,OAC/BF,cACFf,iBAAiB,OAAQe,aACzBjB,SAASkB,MAAQ,GACjBlB,SAASoB,MAAMC,OAAS,OA3BJJ,CAAAA,cACf,cAAU,CAAC,CAChBK,WAAY,qCACZC,KAAM,CAAEnB,QAASa,gBACf,GACDO,MAAKC,WAEJC,QAAQC,IAAI,uBAAwBF,UAC7BA,YAERG,OAAMC,QAELH,QAAQG,MAAM,+BAAgCA,mCAC7BA,QACV,kBAAU,QAAS,wBAe5BC,CAAeb,aACZO,MAAKC,WAEJC,QAAQC,IAAI,0BAA2BF,gBAGhCM,WAAYC,YAAcP,SAASQ,MAAM,qBAChD/B,iBAAiB,MAAO6B,YAAc,yBAGlCC,YACF9B,iBAAiB,8BAAwB8B,gBAG5CJ,OAAMC,QAELH,QAAQG,MAAM,6BAA8BA,OAC5C3B,iBAAiB,MAAO,kEAyBZ,KAjBO,YACnBgC,WAAa5B,SAASC,cAAcR,gBAAgBE,MACpDD,SAAWM,SAASC,cAAcR,gBAAgBC,UAExDkC,WAAWC,iBAAiB,QAASnB,aAErChB,SAASmC,iBAAiB,YAAaC,IACvB,UAAVA,EAAEC,KAAoBD,EAAEE,WAC1BF,EAAEG,iBACFvB,mBASJwB"}